cmake_minimum_required(VERSION 3.14)

project(compact_trie_main)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_VERBOSE_MAKEFILE ON)

# Project wide cpp standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)


# find_package(spdlog REQUIRED)

# https://blog.kitware.com/cmake-and-the-default-build-type/
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
set(default_build_type "DEBUG")
message(STATUS "Setting build type to '${default_build_type}' as none was specified")
# I prefer having it remind you you've forgotten to set the build type every time
set(CMAKE_BUILD_TYPE "${default_build_type}")# CACHE
    # STRING "Choose the type of build." FORCE)
# Set the possible values of build type for cmake-gui
set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()


string(CONCAT COMPILER_FLAGS "-Wall -Wextra -pedantic -Wfloat-equal "
"-Wwrite-strings -Wswitch-enum -Wunreachable-code -Wconversion "
"-Wcast-qual -Wstrict-overflow=5 -Werror=uninitialized "
"-Werror=return-type -pipe -fdiagnostics-color")

# https://stackoverflow.com/a/10055571/8594193
if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    # using Clang
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    # using GCC
    string(APPEND COMPILER_FLAGS " -fconcepts")
endif()
# message("compiler flags: ${COMPILER_FLAGS}")

set(CMAKE_CXX_FLAGS_DEBUG "-g -O0 ${COMPILER_FLAGS}")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-g -O2 -fno-omit-frame-pointer -march=native ${COMPILER_FLAGS}")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -march=native ${COMPILER_FLAGS}")
# set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -O3 -march=native ${COMPILER_FLAGS}")

set(CMAKE_EXE_LINKER_FLAGS_DEBUG "-fsanitize=address,undefined")
set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "-fsanitize=address,undefined")


set(EXE_NAME ${PROJECT_NAME})
add_executable(${EXE_NAME} main.cpp)
target_link_libraries(${EXE_NAME} PRIVATE compact_trie::compact_trie)

# message("copy ${CMAKE_BINARY_DIR}/compile_commands.json -> ${PROJECT_SOURCE_DIR}")
add_custom_target(${PROJECT_NAME}_after_all_built ALL)
add_custom_command(TARGET ${PROJECT_NAME}_after_all_built POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E
    copy "${CMAKE_BINARY_DIR}/compile_commands.json" "${PROJECT_SOURCE_DIR}"
	)

